
## There are only two edits I made to this document.

[toolchanger]
  t_command_restore_axis: Z
  params_safe_y: 150
  params_close_y: 100
  params_fast_speed: 30000 # Go as fast as we can
  params_path_speed: 900 # 20mm/s for the actual change
  params_rods_mini_hookon_path: [{'z':7, 'y':0}, {'z':-8, 'y':0}, {'z':-12.3, 'y':3.5}]
  initialize_on: manual

  initialize_gcode:
    INITIALIZE_TOOLCHANGER
    DETECT_ACTIVE_TOOL_PROBE
    _INITIALIZE_FROM_DETECTED_TOOL

  before_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
       SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="''"
    {% endif %}

  after_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
       SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="'c44'"
    {% endif %}
    {% if tool.params_input_shaper_freq_x %}
      SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y}
    {% endif %}

  dropoff_gcode:
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    RESPOND TYPE=echo MSG='Dropping off {tool.name}'
    G90
    ; Move 1 mm up to avoid crashing into things
    G0 Z{ [cur_z+1.0, max_z]|min } F{fast}
    #   ##############  Move up to the dock  ##############
    ROUNDED_G0 Y={tool.params_safe_y} D=20 F={fast}
    ROUNDED_G0 X={x} D=150 F={fast}
    ROUNDED_G0 Z={z + path[0]['z']|float} D=20 F={fast}
    ROUNDED_G0 Y={y + path[0]['y']|float} D=0 F={fast}
    STOP_TOOL_PROBE_CRASH_DETECTION
    #  ############## Run the path ##############
    {% for pos in path %}
        G0 Y{y + pos['y']|float} Z{z + pos['z']|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
    {% endfor %}

  pickup_gcode:
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
    RESPOND TYPE=echo MSG='Picking up {tool.name}'
    G90
    #   ##############  Fast to the last point  ##############
    ROUNDED_G0 Y={tool.params_close_y} F={fast} D=5
    ROUNDED_G0 X={x} Z={z + path[-1]['z']|float} F={fast} D=5
    ROUNDED_G0 Y={y + path[-1]['y']|float} F={fast} D=0
    # Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.

    {% if tool.extruder %}
      M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
    {% endif %}
    # Run the path in reverse
    {% for pos in path|reverse %}
      G0 Y{y + pos['y']|float} Z{z + pos['z']|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
      {% if 'f' in pos %} # Use the f presence as marker that we have made contact with the tool.
        START_TOOL_PROBE_CRASH_DETECTION T={tool.tool_number}
      {% endif %}
    {% endfor %}
    # Restore the position with smooth rounded move.
    ROUNDED_G0 Y={tool.params_safe_y} F={fast} D=20
    {% if 'Z' in restore_position %}
      ROUNDED_G0 Z={restore_position.Z} F={fast} D=150
    {% endif %}
    {% if 'X' in restore_position %}
      ROUNDED_G0 X={restore_position.X} F={fast} D=1000
    {% endif %}
    {% if 'Y' in restore_position %}
      ROUNDED_G0 Y={restore_position.Y} F={fast} D=0
    {% endif %}
    ROUNDED_G0 D=0

[gcode_macro _INITIALIZE_FROM_DETECTED_TOOL]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number | int == -1 %}
    RESPOND TYPE=error MSG='Failed to detect active tool'
    PAUSE
  {% else %}
    INITIALIZE_TOOLCHANGER T={printer.tool_probe_endstop.active_tool_number}
  {% endif %}

[gcode_macro TOOL_ALIGN_START]
gcode:
    INITIALIZE_TOOLCHANGER # Detect current tool
    _TOOL_ALIGN_START

[gcode_macro _TOOL_ALIGN_START]
gcode:
    STOP_TOOL_PROBE_CRASH_DETECTION
    {% set tool = printer[printer.toolchanger.tool] %}
    SET_TOOL_PARAMETER PARAMETER='params_path_speed' VALUE=300
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}
    G0 X{tool.params_park_x} Z{tool.params_park_z}
    G0 Y{tool.params_park_y|float + 100.0}

[gcode_macro TOOL_ALIGN_TEST]
gcode:
    {% set curpos = printer.gcode_move.gcode_position %}
    {% if curpos[1] > 0 %}
      # Check if Y is not too far, to very unrealistic tests.
      RESPOND TYPE=error MSG='Test aborted. Tool too far away from the dock.'
    {% else %}
      INITIALIZE_TOOLCHANGER # Detect current tool
      SET_GCODE_OFFSET X=0 Y=0 Z=0
      STOP_TOOL_PROBE_CRASH_DETECTION
      SET_TOOL_PARAMETER PARAMETER='params_park_x' VALUE={curpos[0]}
      SET_TOOL_PARAMETER PARAMETER='params_park_y' VALUE={curpos[1]}
      SET_TOOL_PARAMETER PARAMETER='params_park_z' VALUE={curpos[2]}
      TEST_TOOL_DOCKING RESTORE_AXIS=XYZ
      STOP_TOOL_PROBE_CRASH_DETECTION
    {% endif %}

[gcode_macro TOOL_ALIGN_DONE]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    SAVE_TOOL_PARAMETER PARAMETER='params_park_x'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_y'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_z'
    RESET_TOOL_PARAMETER PARAMETER='params_path_speed'
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}


[gcode_macro _TOOLCHANGER_TURN_OFF_FANS]
description: Turn off part cooling fans for all tools.
gcode:
  {% for tool_nr in printer.toolchanger.tool_numbers %}
    M107 T{tool_nr}
  {% endfor %}


[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>]
  Set tool temperature.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  STATUS_HEATING
  {% if params.T is defined %}
    {% set newparameters = "" %}
    {% set newparameters = newparameters ~ " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE{newparameters}
  {% else %}
    M104.1 {rawparams}
  {% endif %}


[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] [S<temperature>]
  Set tool temperature and wait.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  STATUS_HEATING
  {% if params.T is defined %}
    {% set newparameters = "" %}
    {% set newparameters = newparameters ~ " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE WAIT=1 {newparameters}
  {% else %}
    M109.1 {rawparams}
  {% endif %}


[gcode_macro PRINT_START]
gcode:
  STATUS_BUSY
  {% set TOOL_TEMP = params.TOOL_TEMP|default(150)|float %}
  {% set BED_TEMP = params.BED_TEMP|default(0)|float %}
  #M117 Initializing...  
  INITIALIZE_TOOLCHANGER
  STOP_TOOL_PROBE_CRASH_DETECTION
  CLEAR_PAUSE

  #_TOOLCHANGER_PRINT_START_START  # commented this out because it's throwing an error

  #M117 Homing  
  STATUS_HOMING
  G28
  #M117 Cleaning the nozzle
  
  #M117 Heating up the bed  
  M190 S{ BED_TEMP }

  #M117 Calibrating bed
  STATUS_HEATING
  M109 S150 ; Heat up nozzle to soften any leftover filament for homing.  
  #STATUS_MESHING
  CLEAN_NOZZLE
  BED_MESH_CALIBRATE
  #G32 ; Home, gantry tram
  M109 S0 # Stop to heat, the actual printing may happen with a different hotend

  {% if printer.toolchanger.tools_preheat %}
    # Preheat all the hotends in use
    {% for tool_nr in printer.toolchanger.tool_numbers %}
      {% set tooltemp_param = 'T' ~ tool_nr|string ~ '_TEMP' %}
      {% if tooltemp_param in params %}
        STATUS_HEATING
        M104 T{tool_nr} S{params[tooltemp_param]}
      {% endif %}
    {% endfor %}

    {% if params.TOOL is defined %}
      T{params.TOOL}
    {% endif %}
  {% endif %}

  #M117 Heating up the hotend  
  G90 ; Absolute positioning
  G92 E0 ; Zero extruder
  M106 S100 ; Start part cooling fan, 255=100%
  G0 Z10 F3000  
  STATUS_HEATING
  M109 S{ TOOL_TEMP }
  START_TOOL_PROBE_CRASH_DETECTION
  G1 E2
  CLEAN_NOZZLE
  G92 E0 ; Zero extruder
  _MOVE_TO_CENTER
  STATUS_PRINTING
  #_TOOLCHANGER_PRINT_START_END # commented this out because it's throwing an error
  #M117 Printing


[gcode_macro PRINT_END]
gcode:  
  M400                           ; wait for buffer to clear
  CLEAR_PAUSE
  M220 S100
  M221 S100  
  {% if printer.extruder.temperature >= 180 %}
    M83
    G91
    G1 E-0.4 Z5 F2400                   ; retract filament    
  {% endif %}
  M82
  G90

  SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0

  TURN_OFF_HEATERS
  _TOOLCHANGER_TURN_OFF_FANS     ; turn off fan
  M140 S0                        ; turn off bed

  #_TOOLCHANGER_PRINT_END_END # commented this out because it's throwing an error
  T0
  G1 Y290
  G1 X150
  STOP_TOOL_PROBE_CRASH_DETECTION
  STATUS_READY
